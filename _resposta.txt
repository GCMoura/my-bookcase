
class HalfEdge{
  a: vertice inicial
  o: half edge oposta
  f: face incidente
  n: proxima half edge
  p: half edge anterior

  function retornaFace(h){ 
    //recebe uma aresta e retorna a face incidente

    retorna f
  }

  function verificaArestaOposta(v, h, triangulos) {
    //verificar se a aresta anterior possui aresta oposta. Se tiver retorna a face
    
    for(p of h){ 
      //para aresta anterior referente à aresta atual
      
      if(o == true){ 
        //se existe aresta oposta

        if(a == v){
          // se o vertice inicial dessa aresta for igual ao vertice de entrada

          triangulo.push(f) //outro triangulo adicionado ao array

          // após adicionar a nova face, retorna a mesma função passando
          // v = vértice de entrada, o = aresta oposta, triangulos = array
          
          verificaArestaOposta(v, o, triangulos)
        } else {
          // se o vertice inicial dessa aresta não for igual ao vertice de entrada o laço termina

          break
        }

      } else {
        //se a aresta anterior não possui aresta oposta, 
        //chama a função para verifica a própria aresta h, e o laço é terminado

        verificaArestaAtual(v, h, triangulos)
        break
      } 
    }
  }

  function verificaArestaAtual(v, h, triangulos){
    //verifica se a aresta atual possui aresta oposta

    for(n of h){
      //se a aresta atual possui aresta oposta, essa aresta está no sentido contrário
      //é necessário verificar a origem da aresta posterior

      if(o == true){
        //se a aresta posterior possui aresta oposta
        //verifica se a origem dessa aresta é igual ao vertice de entrada

        if(a == v){
          // se o vertice inicial dessa aresta for igual ao vertice de entrada

          triangulo.push(f) //outro triangulo adicionado ao array
        } else {
          // se o vertice inicial dessa aresta não for igual ao vertice de entrada o laço termina

        break
        }
      } else {
        //se a aresta anterior não possui aresta oposta, o laço termina

        break
      }
    }
  }
  
}

class Vertex {
  g: geometria vertice
  h: half edge partindo do vertice

  retornaHalfEdge(v){
    if(v == g){
      retorna h
    }
  }
}

class Face {
  e: uma das half edge da face
}

entrada = v
triangulos = []

vertice = new Vertex()
edge = vertice.retornaHalfEdge(v) //retorna uma aresta

half_edge = new HalfEdge()
face = half_edge.retornaFace(edge) //retorna a primeira face (triângulo)

triangulos.push(face) //primeiro triangulo é adicionado ao array

resultado = half_edge.verificaArestaOposta(v, edge, triangulos)

A lista com os triangulo está na variável resultado